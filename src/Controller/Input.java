package Controller;
import java.awt.*;
import java.util.List;
import java.util.Scanner;
import Models.Color;
import Models.GameSetting;

public class Input {

    /** –°–∫–∞–Ω–µ—Ä –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö */
    private final Scanner scanner = new Scanner(System.in);

    /**
     * –í—ã–±–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫
     * @return –∏–≥—Ä–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
     */
    public GameSetting chooseGameSetting() {
        System.out.println("""
                –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã, –¥–ª—è —ç—Ç–æ–≥–æ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:
                easy - —Ä–µ–∂–∏–º –ø—Ä–æ—Ç–∏–≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –≤ –ª–µ–≥–∫–æ–º —Ä–µ–∂–∏–º–µ üåà
                hard - —Ä–µ–∂–∏–º –∏–≥—Ä—ã –ø—Ä–æ—Ç–∏–≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –≤ —Å–ª–æ–∂–Ω–æ–º —Ä–µ–∂–∏–º–µ üî•
                pvp - —Ä–µ–∂–∏–º –ø—Ä–æ—Ç–∏–≤ –∏–≥—Ä–æ–∫–∞ üíÄ
                """);
        String commandLine;
        GameSetting gameSetting = null;
        do {
            commandLine = scanner.nextLine().toLowerCase().trim();
            switch (commandLine) {
                case ("easy") :
                    gameSetting = GameSetting.Easy;
                    break;
                case ("hard") :
                    gameSetting = GameSetting.Hard;
                    break;
                case ("pvp") :
                    gameSetting = GameSetting.Pvp;
                    break;
                default :
                    System.out.print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–∂–∏–º, –≤–≤–µ–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ\n");
                    break;
            }
        } while (!commandLine.equals("pvp")
                && !commandLine.equals("easy")
                && !commandLine.equals("hard"));
        return gameSetting;
    }

    /**
     * –í–≤–æ–¥ –∏–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞
     * @param colorPlayer —Ü–≤–µ—Ç –∏–≥—Ä–æ–∫–∞
     * @return –∏–º—è –∏–≥—Ä–æ–∫–∞
     */
    public String inputUserName(Color colorPlayer) {
        if (colorPlayer == Color.Black) {
            System.out.print("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞:\n");
        }
        if (colorPlayer == Color.White) {
            System.out.print("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞:\n");
        }
        return scanner.nextLine();
    }

    /**
     * –°—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É, –≤–≤–µ–¥–µ–Ω–Ω—É—é –ø–æ–ª—å–∑–ª–≤–∞—Ç–µ–ª–µ–º
     * @param colorPlayer —Ü–≤–µ—Ç –∏–≥—Ä–æ–∫–∞
     * @param pointList —Å–ø–∏—Å–æ–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç, –∫—É–¥–∞ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥
     * @return -1, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ —Ä–µ—à–∏–ª –æ—Ç–º–µ–Ω–∏—Ç—å —Å–≤–æ–π —Ö–æ–¥, –∏–Ω–∞—á–µ 1..pointList.size
     */
    public int chooseCommand(Color colorPlayer, List<Point> pointList) {
        if (colorPlayer == Color.Black) {
            System.out.println("–°–µ–π—á–∞—Å —Ö–æ–¥ —á–µ—Ä–Ω–æ–≥–æ");
        }
        if (colorPlayer == Color.White) {
            System.out.println("–°–µ–π—á–∞—Å —Ö–æ–¥ –±–µ–ª–æ–≥–æ");
        }
        System.out.println("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ö–æ–¥–∞ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 1 - " + pointList.size());
        System.out.println("–ò–ª–∏ –Ω–∞–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /z –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ö–æ–¥–∞");
        String line;
        int inputOption;
        do {
            try {
                line = scanner.nextLine();
                if (line.toLowerCase().trim().equals("/z")) {
                    return -1;
                }
                inputOption = Integer.parseInt(line);
                if (inputOption > 0 && inputOption <= pointList.size()) {
                    break;
                } else {
                    System.out.println("–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 1 - " + pointList.size());
                }
            } catch (Exception e) {
                System.out.println("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É");
            }

        } while (true);
        return inputOption;
    }

    /**
     * –•–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É
     * @return true, –µ—Å–ª–∏ –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è, –∏–Ω–∞—á–µ false
     */
    public boolean isGameFinishInput() {
        System.out.println();
        System.out.println("–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑? –ù–∞–±–µ—Ä–∏—Ç–µ: \n/y - –¥–ª—è –µ—â–µ –æ–¥–Ω–æ–π –∏–≥—Ä—ã \n/n - –¥–ª—è –≤—ã—Ö–æ–¥–∞");
        String commandline = scanner.nextLine().toLowerCase().trim();
        while (!commandline.equals("/n") && !commandline.equals("/y")) {
            System.out.println("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É");
            commandline = scanner.nextLine().toLowerCase().trim();
        }
        return commandline.equals("/n");
    }
}
